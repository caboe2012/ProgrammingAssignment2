a
exit
q()
library(survival)
library(KMsurv)
install.packages("KMsurv")
library(KMsurv)
data()
data(aids)
head(aids)
attach(aids)
q()
install.packages(KernSmooth)
install.packages('KernSmooth')
library(KernSmooth)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
x
split(x,f)
getwd()
setwd("~/Dropbox/Coursera/Data Science Specialization/R_programming/Week1")
dat <- read.csv("hw1_data.csv")
dat
s <- split(dat, dat$Month)
s
lapply(s,function(x) colMeans(x,[, c("Ozone, "Solar.R", "Wind"")]))
lapply(s,function(x) colMeans(x[, c("Ozone, "Solar.R", "Wind"")]))
lapply(s,function(x) colMeans(x[, c("Ozone, "Solar.R", "Wind")]))
lapply(s,function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s,function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm=TRUE))
?interaction
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
get
get()
makeVector(5)
makeVector(c(1,2,3,4))
test <- sample(1:100,100)
test
test <- rnorm(1:100,100)
test
test <- rnorm(100)
test
makeVector(test)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector$get()
makeVector$get
makeVector$get(test)
methods(makeVector)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector(sample(100))
a
sample(100)
sample(1:10000, 100)
a <- sample(1:1000, 10)
a
mean(a)
b <- makeVector(a)
b
cachemean(b)
cachemean(b)
a
get <- function() x
get
A
a
a$getmean
a$getmean()
get
f <- function() {
x <- 1
y <- 2
c(x, y)
}
f()
rm(f)
f()
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
x <- 100
h()
get()
x
check <- function() "hello"
check()
setmean <- function(mean) m<<-mean
setmean(a)
a
get
get()
x
x <- 1:5
get
get()
a <- sample(1:100,10)
x <- sample(1:100,10)
x
get()
set <- function(y) {}
set <- function(y) {}
set <- function(y) {
x <<- y
m <<- NULL
}
a
b <- mean(a)
b
setmean(b)
getmean <- function() m
getmean()
m<-NULL
getmean()
a
x
mean(a)
mean(x)
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
list(set(x))
set()
set(x)
n <- set(x)
n
x
set(x)
print (set(x))
x
test <- makeVector(x)
test
test$getmean()
methods(test)
methods(class(makeVector()))
test <- matrix(1:4,2,2)
test
solve(test)
inverse_test <- solve(test)
inverse_test
test
test*inverse.rle()
test*inverse_test
test**inverse_test
test%*%inverse_test
test <- matrix(sample(1:100,16),4,4)
test
inv_test <- solve(test)
inv_test
inv_test%*%test
setwd("~/Dropbox/Coursera/Data Science Specialization/R_programming/ProgrammingAssignment2")
source("cachematrix.R")
check
check <- makeCacheMatrix(test)
check
cacheSolve(check)
cacheSolve(check)
class(test)
test
test$getinverse
test$getinverse()
test <- makeCacheMatrix(matrix(sample(1:100,16),4,4))
test
test$get()
test$getinverse()
test$setinverse("hello")
test
test$getinverse()
test$setinverse(m)
test$getinverse()
cacheSolve(test)
test$getinverse()
test$set(matrix(sameple(1:100,16)4,4))
test$set(matrix(sample(1:100,16),4,4))
test$getinverse()
quit()
